{
  "name": "jy-transform",
  "tagline": "This project aims to read, write and transform YAML, JS or JSON objects into each other using CLI or API. The source and destination resources can be files, objects or streams.",
  "body": "Welcome to the jy-transform wiki!\r\n\r\nCurrently, we are in a development mode, release is planned as soon as possible. You can download the project using\r\n\r\n```\r\n$ sudo npm install \"https://github.com/deadratfink/jy-transform.git#development\" -g\r\n```\r\n\r\nBe aware, you might expect some unknown bugs! If you experience any, please report them on issue page, thanx!\r\n\r\n\r\n# Stats\r\n\r\n| [Github License](https://github.com/deadratfink/jy-transform) | [Github Issues](https://github.com/deadratfink/jy-transform) | [Github Release](https://github.com/deadratfink/jy-transform) | [Github Tags](https://github.com/deadratfink/jy-transform) |\r\n| --- | --- | --- | --- |\r\n| [![License][gh-license-image]][gh-license-url] | [![Issue Stats][gh-issues-image]][gh-issues-url] | [![Issue Stats][gh-releases-image]][gh-releases-url] | [![Issue Stats][gh-tags-image]][gh-tags-url] |\r\n\r\n| [Travis CI](https://travis-ci.org) | [Issue Stats](http://issuestats.com/) (Pull) | [Issue Stats](http://issuestats.com/) (Issue) |\r\n| --- | --- | --- |\r\n| [![Build Status][ci-image]][ci-url] | [![Issue Stats][is-pull-image]][is-url] | [![Issue Stats][is-issue-image]][is-url] |\r\n\r\n| [Codecov](https://codecov.io) | [Inch CI](http://inch-ci.org) | [David](https://david-dm.org) DM | [David](https://david-dm.org) DM (dev) | Branch |\r\n| --- | --- | --- | --- | --- |\r\n| [![codecov.io][cc-image-master]][cc-url-master]           | [![inch-ci.org][inch-image-master]][inch-url-master]           | [![Dependency Status][dep-image-master]][dep-url-master]           | [![devDependency Status][devdep-image-master]][devdep-url-master] | master |\r\n| [![codecov.io][cc-image-development]][cc-url-development] | [![inch-ci.org][inch-image-development]][inch-url-development] | [![Dependency Status][dep-image-development]][dep-url-development] | [![devDependency Status][devdep-image-development]][devdep-url-development] | development |\r\n\r\n## Coverage Graphs\r\n\r\n| Branch | Graph |\r\n| --- | --- |\r\n| master | ![codecov.io](https://codecov.io/github/deadratfink/jy-transform/branch.svg?branch=master&vg=true) |\r\n| development| ![codecov.io](https://codecov.io/github/deadratfink/jy-transform/branch.svg?branch=development&vg=true) |\r\n\r\n\r\n[gh-license-image]: https://img.shields.io/github/license/deadratfink/jy-transform.svg?style=flat-square\r\n[gh-license-url]: https://github.com/deadratfink/jy-transform/blob/master/LICENSE.md\r\n\r\n[gh-issues-image]: https://img.shields.io/github/issues/deadratfink/jy-transform.svg?style=flat-square\r\n[gh-issues-url]: https://github.com/deadratfink/jy-transform/issues\r\n\r\n[gh-releases-image]: https://img.shields.io/github/release/deadratfink/jy-transform.svg?style=flat-square\r\n[gh-releases-url]: https://github.com/deadratfink/jy-transform/releases\r\n\r\n[gh-tags-image]: https://img.shields.io/github/tag/deadratfink/jy-transform.svg?style=flat-square\r\n[gh-tags-url]: https://github.com/deadratfink/jy-transform/tags\r\n\r\n\r\n[ci-image]: https://img.shields.io/travis/deadratfink/jy-transform.svg?style=flat-square\r\n[ci-url]: https://travis-ci.org/deadratfink/jy-transform/branches\r\n\r\n[is-pull-image]: http://issuestats.com/github/deadratfink/jy-transform/badge/pr?style=flat-square\r\n[is-issue-image]: http://issuestats.com/github/deadratfink/jy-transform/badge/issue?style=flat-square\r\n[is-url]: http://issuestats.com/github/deadratfink/jy-transform\r\n\r\n\r\n[cc-image-master]: https://img.shields.io/codecov/c/github/deadratfink/jy-transform/master.svg?style=flat-square\r\n[cc-url-master]: https://codecov.io/github/deadratfink/jy-transform?branch=master\r\n[cc-image-development]: https://img.shields.io/codecov/c/github/deadratfink/jy-transform/development.svg?style=flat-square\r\n[cc-url-development]: https://codecov.io/github/deadratfink/jy-transform?branch=development\r\n\r\n[inch-image-master]: https://inch-ci.org/github/deadratfink/jy-transform.svg?branch=master&style=flat-square\r\n[inch-url-master]: https://inch-ci.org/github/deadratfink/jy-transform?branch=master\r\n[inch-image-development]: https://inch-ci.org/github/deadratfink/jy-transform.svg?branch=development&style=flat-square\r\n[inch-url-development]: https://inch-ci.org/github/deadratfink/jy-transform?branch=development\r\n\r\n[dep-image-master]: https://img.shields.io/david/deadratfink/jy-transform/master.svg?style=flat-square\r\n[dep-url-master]: https://david-dm.org/deadratfink/jy-transform/master\r\n[dep-image-development]: https://img.shields.io/david/deadratfink/jy-transform/development.svg?style=flat-square\r\n[dep-url-development]: https://david-dm.org/deadratfink/jy-transform/development\r\n\r\n[devdep-image-master]: https://img.shields.io/david/dev/deadratfink/jy-transform/master.svg?style=flat-square\r\n[devdep-url-master]: https://david-dm.org/deadratfink/jy-transform/master#info=devDependencies\r\n[devdep-image-development]: https://img.shields.io/david/dev/deadratfink/jy-transform/development.svg?style=flat-square\r\n[devdep-url-development]: https://david-dm.org/deadratfink/jy-transform/development#info=devDependencies\r\n\r\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\r\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\r\n# TOC\r\n\r\n- [jy-transform](#jy-transform)\r\n  - [Installation](#installation)\r\n  - [Tests](#tests)\r\n  - [Dependencies](#dependencies)\r\n  - [Dev Dependencies](#dev-dependencies)\r\n  - [License](#license)\r\n  - [Motivation](#motivation)\r\n  - [Contributing](#contributing)\r\n  - [Not Supported Yet / Plannings](#not-supported-yet--plannings)\r\n- [Usage](#usage)\r\n  - [Usage Types](#usage-types)\r\n  - [Use Cases](#use-cases)\r\n  - [CLI Usage](#cli-usage)\r\n  - [Origin and Target Type Inference](#origin-and-target-type-inference)\r\n  - [API Usage](#api-usage)\r\n  - [Injecting Logger](#injecting-logger)\r\n- [API Reference](#api-reference)\r\n  - [Classes](#classes)\r\n  - [Typedefs](#typedefs)\r\n  - [Constants](#constants)\r\n  - [LogWrapper](#logwrapper)\r\n  - [Middleware](#middleware)\r\n  - [OptionsHandler](#optionshandler)\r\n  - [Reader](#reader)\r\n  - [Transformer](#transformer)\r\n  - [Writer](#writer)\r\n  - [Options : <code>object</code>](#options--codeobjectcode)\r\n\r\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\r\n\r\n# jy-transform \r\n\r\nThis project aims to read, write and transform _*.yaml_ files to _.js_ or _*.json_ files or vice-versa via CLI or API.\r\n\r\n## Installation\r\n\r\nDownload node at [nodejs.org](http://nodejs.org) and install it, if you haven't already.\r\n\r\n```sh\r\nnpm install jy-transform --global\r\n```\r\n\r\n\r\n## Tests\r\n\r\n```sh\r\nnpm install\r\nnpm test\r\n```\r\n\r\n## Dependencies\r\n\r\n- [bluebird](https://github.com/petkaantonov/bluebird): Full featured Promises/A+ implementation with exceptionally good performance\r\n- [cli](https://github.com/chriso/cli): A tool for rapidly building command line apps\r\n- [is-stream](https://github.com/sindresorhus/is-stream): Check if something is a Node.js stream\r\n- [js-yaml](https://github.com/nodeca/js-yaml): YAML 1.2 parser and serializer\r\n- [json-stringify-safe](https://github.com/isaacs/json-stringify-safe): Like JSON.stringify, but doesn&#39;t blow up on circular refs.\r\n- [mkdirp-then](https://github.com/fs-utils/mkdirp-then): mkdirp as promised\r\n- [serialize-js](https://github.com/RReverser/serialize-js): User-readable object serialization for JavaScript.\r\n\r\n## Dev Dependencies\r\n\r\n- [codecov](https://github.com/codecov/codecov-node): Uploading report to Codecov: https://codecov.io\r\n- [doctoc](https://github.com/thlorenz/doctoc): Generates TOC for markdown files of local git repo.\r\n- [fs-extra](https://github.com/jprichardson/node-fs-extra): fs-extra contains methods that aren&#39;t included in the vanilla Node.js fs package. Such as mkdir -p, cp -r, and rm -rf.\r\n- [istanbul](https://github.com/gotwarlost/istanbul): Yet another JS code coverage tool that computes statement, line, function and branch coverage with module loader hooks to transparently add coverage when running tests. Supports all JS coverage use cases including unit tests, server side functional tests \r\n- [jsdoc-parse](https://github.com/jsdoc2md/jsdoc-parse): Jsdoc-annotated source code in, JSON format documentation out.\r\n- [jsdoc-to-markdown](https://github.com/jsdoc2md/jsdoc-to-markdown): jsdoc-annotated source in, markdown API docs out.\r\n- [mocha](https://github.com/mochajs/mocha): simple, flexible, fun test framework\r\n- [mocha-lcov-reporter](https://github.com/StevenLooman/mocha-lcov-reporter): LCOV reporter for Mocha\r\n- [object-path](https://github.com/mariocasciaro/object-path): Access deep properties using a path\r\n- [package-json-to-readme](https://github.com/zeke/package-json-to-readme): Generate a README.md from package.json contents\r\n- [winston](https://github.com/winstonjs/winston): A multi-transport async logging library for Node.js\r\n\r\n\r\n## License\r\n\r\nSEE LICENSE IN [LICENSE.md](https://github.com/deadratfink/jy-transform/blob/master/LICENSE.md)\r\n\r\n## Motivation\r\n\r\nWhy this module? After struggling with some huge YAML file and accidentally \r\noccurring wrong indentions which results in an annoying failure investigation, \r\nI decided to get rid of the YAML file and therefore, create a module which \r\nshould be aimed as the swiss army knife for transforming YAML, JS and JSON \r\nfiles into each other.\r\n\r\n## Contributing\r\n\r\nPull requests and stars are always welcome. Anybody is invited to take part \r\ninto this project. For bugs and feature requests, please create an \r\n[issue](https://github.com/deadratfink/jy-transform/issues).\r\nWhen contributing as coder, please take care of the following conventions:\r\n\r\n- Enter yourself in the `constributors` section of _package.json_.\r\n- We strictly follow [Semantic Versioning 2](http://semver.org) rules.\r\n- The `development` branch is the leading branch. However, you can push directly, \r\n  but is highly recommended to create bugfix and feature branches and use pull \r\n  requests when finished. Any of these should be prefixed with `bugfix/#...` of \r\n  `feature/#...` (containing issue number followed by a short, \"underscored\" \r\n  proper meaning), e.g. \r\n  - `bugfix/#8_fix_js_reading_with_require`\r\n  - `feature/#14_multidocument_support`\r\n- The `master` branch is protected and will never be pushed directly (always use pull-requests).\r\n- Indention for any file is 4 SPACEs.\r\n- Keep code coverage high (> 80%).\r\n- Doc everything with [JSDocs](http://usejsdoc.org/) and document concepts in \r\n  [README.md](https://github.com/deadratfink/jy-transform/blob/development/README.md)\r\n  or [Wiki](https://github.com/deadratfink/jy-transform/wiki).\r\n- Use single parenthesis (`'...'`) instead of double parenthesis (`\"...\"`)\r\n- Avoid the of use parenthesis for keys in JSON objects.\r\n- Use the strict mode (`'use strict';`) in _*.js_ files.\r\n\r\n\r\n## Not Supported Yet / Plannings\r\n\r\nAt the moment we require that each document to transform is a _single_ one per file!\r\n\r\nMultidocument handling would be a cool feature which refers in general to YAML \r\nand JS only and is currently not supported. This is planned and reflected \r\nin feature [#14](https://github.com/deadratfink/jy-transform/issues/14).\r\n\r\n# Usage\r\n\r\nThe module can bu used on CLI or as API. The latter is fully [Promise](http://bluebirdjs.com/docs/api-reference.html) \r\nbased. Besides transformation this module can also be used for laoding and/or writing \r\nYAML, JS or JSON files. \r\n\r\n## Usage Types\r\n\r\nThe module can be used in two different ways:\r\n\r\n- On CLI (recommended install globally via `-g` option)\r\n- Via API (install locally)\r\n\r\nAll use cases are described in more detail in the following sections.\r\n\r\n## Use Cases\r\n\r\n- Reading files (`Reader`)\r\n- Transforming JSON objects (`Transformer`)\r\n- Apply dedicated actions on the intermediate JSON objects (`Transformer` + `Middleware`)\r\n- Writing files (`Writer`)\r\n\r\n### Reading\r\n\r\nReading from:\r\n\r\n- _*.yaml_ file\r\n- _*.js_ file\r\n- _*.json_ file\r\n- `stream.Readable` (requires `options.origin` property set)\r\n- any JS object (actually, this mean read phase is skipped, because object is in-memory already)\r\n\r\n### Transformation\r\n\r\nThe transformation can take place into several directions:\r\n\r\n- YAML -> JS\r\n- YAML -> JSON\r\n- JS   -> YAML\r\n- JSON -> YAML \r\n- JS   -> JSON \r\n- JSON -> JS \r\n- YAML -> YAML     \r\n- JSON -> JSON\r\n- JS   -> JS       \r\n\r\nwhile:\r\n\r\n- YAML = _*.yaml_, _*.yml_\r\n- JS   = _*.js_   (JSON object)  \r\n- JSON = _*.json_ (JSON serialized)\r\n\r\n### Middleware\r\n\r\nApply actions on the intermediate JSON object via injected [Promise](http://bluebirdjs.com/docs/api-reference.html) \r\nfunctions. This is an optional part for [transformation](#transformation) phase \r\nor is the transformation itself in case of same origin and target type.\r\n\r\n### Writing\r\n\r\nWriting to:\r\n\r\n- _*.yaml_ file\r\n- _*.js_ file\r\n- _*.json_ file\r\n- `stream.Writable`  (requires `options.target` property set)\r\n- any JS object\r\n\r\n## CLI Usage\r\n\r\nThe CLI provides the `jyt` command (actually, this requires the use of a bunch of options):\r\n\r\n```\r\n$ jyt\r\n``` \r\n\r\n### CLI Properties\r\n\r\nAfter the global installation you can access the Transformer command options \r\nwith the help command as follows:\r\n\r\n```\r\n$ jyt --help\r\n```\r\n\r\nThis command  prints an overview about all available CLI properties:\r\n\r\n```\r\n$ jyt --help\r\nUsage:\r\n  jyt [OPTIONS]\r\n\r\nOptions: \r\n  -o, --origin [STRING]  The conversion origin: [ js | json | yaml ] (Default is : if not given, the type is tried to be inferred from the extension of input path, else it is yaml)\r\n  -t, --target [STRING]  The conversion target: [ js | json | yaml ] (Default is : if not given, the type is tried to be inferred from the extension of output path, else it is js)\r\n  -s, --src PATH         The absolute/relative input file path\r\n  -d, --dest [PATH]      The absolute/relative output file path (Default is relative to input file)\r\n  -i, --indent [NUMBER]  The indention for pretty-print: 0 - 8 (json/js) and 1 - 8 (yaml) (Default is 4)\r\n  -k, --no-color         Omit color from output\r\n      --debug            Show debug information\r\n  -v, --version          Display the current version\r\n  -h, --help             Display help and usage details\r\n```\r\n\r\nMore formally defined in the following table: \r\n\r\n| Name | Type | Description | Default | Required |\r\n| --- | --- | --- | --- | --- |\r\n| `-o, --origin` | [ _js_ &#124; _json_ &#124; _yaml_ ]</code> | The transformation origin type. | if not given, the type is tried to be inferred from the extension of source path, else it is _yaml_ | no |\r\n| `-t, --target` | [ _js_ &#124; _json_ &#124; _yaml_ ]</code> | The transformation target type. | if not given, the type is tried to be inferred from the extension of destination path, else it is _js_ | no |\r\n| `-s, --src` | URI | The source file path for transformation. | - | yes |\r\n| `-d, --dest` | URI | The destination file path to transform to. | _'relative to input file'_ | no |\r\n| `-i, --indent` | integer<br> - JSON/JS: _0_-_8_<br> - YAML: _1_-_8_ | The code indention used in destination files. | _4_ | no |\r\n| `-k, --no-color` | n/a | Omit color from output. | _color_ | no |\r\n| `--debug` | n/a | Show debug information. | _false_ | no |\r\n| `-v, --version` | n/a | Display the current version. | n/a | no |\r\n| `-h, --help` | n/a | Display help and usage details. | n/a | no |\r\n\r\nNow we know which properties we can apply on CLI, so let's assume we \r\nhave a YAML file located in _./data/my.yaml_ holding this data:\r\n\r\n```yaml\r\nmyproperty: value\r\n```\r\n\r\nthen we can transform it to a JSON file _./data/my.json_:\r\n\r\n```javascript\r\n{\r\n  \"myproperty\": \"value\"\r\n}\r\n```\r\n\r\nusing this command:\r\n\r\n```\r\n$ jyt -s ./data/my.yaml -t json -i 2\r\n```\r\n\r\nIn this example we have overwritten the standard target type (which is _js_) and applying an\r\nindent of _2_ instead of the default _4_. As default the output file _./data/my.json_ \r\nis written relative to the input file (simply omitting the `dest` option here).\r\n\r\n**NOTE:** here you _have_ to provide the target with `-t json` or else the default `js` would \r\nhave been applied! If the source would have been a `js` type like\r\n\r\n```\r\n$ jyt -s ./data/my.js -t json -i 2\r\n```\r\n\r\nthen the `js` `origin` is automatically inferred from file extension. Analogous, this is also true for \r\nthe `target` option.\r\n\r\n## Origin and Target Type Inference\r\n\r\nThe example above has shown that we have an automatic type inference from file \r\nextensions. This is supported as shown by the following table (from-to):\r\n\r\n| File Extension | Type |\r\n| --- | --- |\r\n| _*.yaml_ | _yaml_ |\r\n| _*.yml_ | _yaml_ |\r\n| _*.js_ | _js_ |\r\n| _*.json_ | _json_ |\r\n\r\n**NOTE:** if you have files without an extension or e.g. _*.txt_ you _have_ to \r\nspecify the origin or target type!\r\n\r\n## API Usage\r\n\r\nSince the usage on CLI is a 2-step process:\r\n\r\n1. Read source file in to JSON object -> \r\n2. Write out (to another type)\r\n\r\nthe direct API calls additionally provide the usage of a _middleware_ function \r\nwhere you can alter the input JSON object before it is written and therefore, which turns \r\nthis into a 3-step process:\r\n \r\n1. Read source file in -> \r\n2. Alter the JSON object -> \r\n3. Write out (to another type)\r\n\r\nFor more details about this and all the functions provided by this module please refer to the \r\n[API Reference](#api-reference) below.\r\n\r\nThe `origin` and `target` type inference is also standard for the API level.\r\n\r\n### API Properties\r\n\r\nThe `Transformer` exposes the following function which takes besides an (optional) \r\n`middleware` function the necessary `options` for the transformation:\r\n\r\n```javascript\r\nfunction transform(options, middleware)\r\n```\r\n\r\nThe `options` object has to follow this key-values table:\r\n\r\n| Name | Type | Description | Default | Required |\r\n| --- | --- | --- | --- | --- |\r\n| origin | <code>string</code> | The origin type. | if not given, the type is tried to be inferred from the extension of source path, else it is 'yaml' | no |\r\n| target | <code>string</code> | The target type. | if not given, the type is tried to be inferred from the extension of destination path, else it is 'js' | no |\r\n| src | <code>string &#124; Readable &#124; object</code> | The source information object: `string` is used as file path, `Readable` stream provides a stringified source and `object` is used as direct JS source.| - | yes |\r\n| dest | <code>string &#124; Writable &#124; object</code> | The destination information object: `string` is used as file path, `Writable` stream writes a stringified source and `object` is used as direct JS object for assignment. | 'relative to input file' | no |\r\n| indent | <code>number</code> | The indention in files. | 4 | no |  \r\n\r\n#### Example\r\n\r\n```javascript\r\nvar options = {\r\n    origin: 'json',\r\n    target: 'yaml',\r\n    src: './my.json',\r\n    dest: './temp/my.yaml',\r\n    indent: 2\r\n}\r\n```\r\n\r\n### Using Middleware\r\n\r\nThe `middleware` is optional but if provided it must be of type `Function` and \r\na [Promise](http://bluebirdjs.com/docs/api-reference.html). One of the easiest \r\nones is the identity function \r\n\r\n_f(data) -> data_ \r\n\r\nwhich could be expressed as \r\n[Promise](http://bluebirdjs.com/docs/api-reference.html) function as follows:\r\n\r\n```javascript\r\nvar middleware = function (json) {\r\n    return Promise.resolve(json);\r\n}\r\n```\r\n\r\nOf course, this would have no effect on the provided JSON data. Actually, this one is \r\nused internally when no middleware is provided to ensure the proper promisified \r\ncontrol flow.\r\n\r\nOK, lets go back to a more practical example, e.g. we want to alter the value of\r\nJSON property before it is written to a file. Assuming we have this piece of YAML\r\nobject as input:\r\n\r\n```yaml\r\nmyproperty: old value\r\n```\r\n\r\nApplying this [Promise](http://bluebirdjs.com/docs/api-reference.html) as middleware\r\n\r\n```javascript\r\nvar middleware = function (json) {\r\n    json.myproperty = 'new value'; \r\n    return Promise.resolve(json);\r\n}\r\n\r\ntransformer.transform(options, middleware)\r\n    .then(function (msg){\r\n        logger.info(msg);\r\n    })\r\n    .catch(function (err) {\r\n        logger.error(err.stack);\r\n    });\r\n```\r\n\r\nwill result in such JSON file:\r\n\r\n```javascript\r\n{\r\n\t\"myproperty\": \"new value\"\r\n}\r\n```\r\n\r\nOf course, you might have use cases wiht complex and/or huge logic where one function \r\nmight be insufficient. This does not raise as a problem because you can create several \r\nfunctions to be applied in the whole transformation process.\r\n\r\nLet's assume we have some Promise functions to apply. For simplicity reasons we simulate \r\nthese for the moment by three functions, each adding key-value to the given (empty) JSON \r\nobject.\r\n\r\n**NOTE:** each has to return the `json` object! \r\n\r\n\r\n```javascript\r\nfunction key1(json) {\r\n    objectPath.set(json, 'key1', 'value1');\r\n    return Promise.resolve(json);\r\n}\r\n\r\nfunction key2(json) {\r\n    objectPath.set(json, 'key2', 'value2');\r\n    return Promise.resolve(json);\r\n}\r\n\r\nfunction key3(json) {\r\n    objectPath.set(json, 'key3', 'value3');\r\n    return Promise.resolve(json);\r\n}\r\n```\r\n\r\nThese can be collected by different aggregation or composition functions of the underlying\r\nPromise framework, e.g. the  [`Promise.all([...])`](http://bluebirdjs.com/docs/api/promise.all.html) \r\nfunction. This can collect all three functions above and ensure their proper execution:\r\n\r\n \r\n```javascript\r\nvar middleware = function (json) {\r\n    return Promise.all([key1(json), key2(json), key3(json)])\r\n        .then(function(result) {\r\n            return Promise.resolve(result[result.length - 1]);\r\n        });\r\n};\r\n\r\nvar transformer = new Transformer(logger);\r\nvar logger = ...;\r\nvar options = {...};\r\n\r\nreturn transformer.transform(options, middleware)\r\n    .then(function (msg){\r\n        logger.info(msg);\r\n    })\r\n    .catch(function (err) {\r\n        logger.error(err.stack);\r\n    });\r\n```\r\n\r\nThe result in the `middleware` function can be retrieved from the `result` array, in `Promise.all([...])` \r\nyou have to pick the last element which contains the \"final product\":\r\n\r\n```javascript\r\n{\r\n    key1: 'value1',\r\n    key2: 'value2',\r\n    key3: 'value3'\r\n}\r\n```\r\n\r\nwhich is then to be passed back to the transformation chain. Following this pattern \r\nyou can do almost everything with the JSON object, like\r\n\r\n- deleting properties\r\n- changing properties to other types\r\n- validating and throwing error if not valid\r\n- ...\r\n\r\nWhatever, but keep it valid when transforming ;-)\r\n\r\n## Injecting Logger\r\n\r\nThe `Reader`, `Transformer` and `Writer` constructors accept an (optional) logger object.\r\nDefault logger is `console`.\r\n\r\n```javascript\r\nvar logger = ...;\r\n\r\nvar reader = new Reader(logger);\r\nvar transformer = new Transformer(logger);\r\nvar writer = new Writer(logger);\r\n```\r\n\r\nAt least, the passed logger object _has to_ support the following functions:\r\n\r\n```javascript\r\nfunction info(msg)\r\nfunction debug(msg)\r\nfunction error(msg)\r\n```\r\n\r\n# API Reference\r\n\r\n## Classes\r\n\r\n<dl>\r\n<dt><a href=\"#Constants\">Constants</a></dt>\r\n<dd><p>Class which defines all constants usable in or with this module.</p>\r\n</dd>\r\n<dt><a href=\"#LogWrapper\">LogWrapper</a></dt>\r\n<dd><p>Class which defines a <code>logger</code> wrapper usable in this module.\r\n       <p>\r\n       <strong>NOTE:</strong> This class is not to be intended to be called from\r\n       outside this module!</p>\r\n</dd>\r\n<dt><a href=\"#Middleware\">Middleware</a></dt>\r\n<dd><p>Class which defines middleware Promises usable in or with this module.</p>\r\n</dd>\r\n<dt><a href=\"#OptionsHandler\">OptionsHandler</a></dt>\r\n<dd><p>Class which defines some useful methods to initialize and prepare the\r\n       transformation options used in this module.\r\n       <p>\r\n       <strong>NOTE:</strong> This class is not to be intended to be called from\r\n       outside this module!</p>\r\n</dd>\r\n<dt><a href=\"#Reader\">Reader</a></dt>\r\n<dd><p>This class provides utility methods usable to read YAML, JSON or JS\r\n       from a file to JS memory objects.</p>\r\n</dd>\r\n<dt><a href=\"#Transformer\">Transformer</a></dt>\r\n<dd><p>This class provides all methods usable to handle YAML, JSON and JS and\r\n       their transformations.</p>\r\n</dd>\r\n<dt><a href=\"#Writer\">Writer</a></dt>\r\n<dd><p>This class provides utility methods usable to write JSON/JS/YAML\r\n       from memory to a JSON/JS/YAML file.</p>\r\n</dd>\r\n</dl>\r\n\r\n## Typedefs\r\n\r\n<dl>\r\n<dt><a href=\"#Options\">Options</a> : <code>object</code></dt>\r\n<dd></dd>\r\n</dl>\r\n\r\n<a name=\"Constants\"></a>\r\n## Constants\r\nClass which defines all constants usable in or with this module.\r\n\r\n**Kind**: global class  \r\n\r\n* [Constants](#Constants)\r\n    * [new Constants()](#new_Constants_new)\r\n    * [.DEFAULT_OPTIONS](#Constants+DEFAULT_OPTIONS) : <code>object</code>\r\n    * [.UTF8](#Constants+UTF8) : <code>string</code>\r\n    * [.YAML](#Constants+YAML) : <code>string</code>\r\n    * [.JSON](#Constants+JSON) : <code>string</code>\r\n    * [.JS](#Constants+JS) : <code>string</code>\r\n    * [.TYPES](#Constants+TYPES) : <code>Array.&lt;string&gt;</code>\r\n    * [.DEFAULT_INDENT](#Constants+DEFAULT_INDENT) : <code>number</code>\r\n    * [.MIN_JSON_JS_INDENT](#Constants+MIN_JSON_JS_INDENT) : <code>number</code>\r\n    * [.MIN_YAML_INDENT](#Constants+MIN_YAML_INDENT) : <code>number</code>\r\n    * [.MAX_INDENT](#Constants+MAX_INDENT) : <code>number</code>\r\n    * [.YAML_TO_JS](#Constants+YAML_TO_JS) : <code>string</code>\r\n    * [.YAML_TO_JSON](#Constants+YAML_TO_JSON) : <code>string</code>\r\n    * [.JS_TO_YAML](#Constants+JS_TO_YAML) : <code>string</code>\r\n    * [.JSON_TO_YAML](#Constants+JSON_TO_YAML) : <code>string</code>\r\n    * [.JSON_TO_JS](#Constants+JSON_TO_JS) : <code>string</code>\r\n    * [.JS_TO_JSON](#Constants+JS_TO_JSON) : <code>string</code>\r\n    * [.YAML_TO_YAML](#Constants+YAML_TO_YAML) : <code>string</code>\r\n    * [.JSON_TO_JSON](#Constants+JSON_TO_JSON) : <code>string</code>\r\n    * [.JS_TO_JS](#Constants+JS_TO_JS) : <code>string</code>\r\n    * [.TRANSFORMATIONS](#Constants+TRANSFORMATIONS) : <code>Array.&lt;string&gt;</code>\r\n\r\n<a name=\"new_Constants_new\"></a>\r\n### new Constants()\r\nConstructs the constants.\r\n\r\n**Returns**: <code>[Constants](#Constants)</code> - - The instance.  \r\n<a name=\"Constants+DEFAULT_OPTIONS\"></a>\r\n### constants.DEFAULT_OPTIONS : <code>object</code>\r\nThe default options.\r\n\r\n**Kind**: instance namespace of <code>[Constants](#Constants)</code>  \r\n**Properties**\r\n\r\n| Name | Type | Default | Description |\r\n| --- | --- | --- | --- |\r\n| origin | <code>string</code> | <code>&quot;yaml&quot;</code> | The default origin type. |\r\n| target | <code>string</code> | <code>&quot;js&quot;</code> | The default target type. |\r\n| dest | <code>string</code> | <code>&quot;&#x27;relative&quot;</code> | to input file'   - The default dest description. |\r\n| indent | <code>number</code> | <code>4</code> | The default indention for files. |\r\n\r\n<a name=\"Constants+UTF8\"></a>\r\n### constants.UTF8 : <code>string</code>\r\nThe 'utf8' constant.\r\n\r\n**Kind**: instance constant of <code>[Constants](#Constants)</code>  \r\n**Access:** public  \r\n<a name=\"Constants+YAML\"></a>\r\n### constants.YAML : <code>string</code>\r\nThe 'yaml' type constant.\r\n\r\n**Kind**: instance constant of <code>[Constants](#Constants)</code>  \r\n**Access:** public  \r\n<a name=\"Constants+JSON\"></a>\r\n### constants.JSON : <code>string</code>\r\nThe 'json' type constant.\r\n\r\n**Kind**: instance constant of <code>[Constants](#Constants)</code>  \r\n**Access:** public  \r\n<a name=\"Constants+JS\"></a>\r\n### constants.JS : <code>string</code>\r\nThe 'js' type constant.\r\n\r\n**Kind**: instance constant of <code>[Constants](#Constants)</code>  \r\n**Access:** public  \r\n<a name=\"Constants+TYPES\"></a>\r\n### constants.TYPES : <code>Array.&lt;string&gt;</code>\r\nThe type constants assembled in an array: `[ 'yaml', 'json', 'js' ]`.\r\n\r\n**Kind**: instance constant of <code>[Constants](#Constants)</code>  \r\n**Access:** public  \r\n<a name=\"Constants+DEFAULT_INDENT\"></a>\r\n### constants.DEFAULT_INDENT : <code>number</code>\r\nThe default file indention (4 SPACEs).\r\n\r\n**Kind**: instance constant of <code>[Constants](#Constants)</code>  \r\n**Access:** public  \r\n<a name=\"Constants+MIN_JSON_JS_INDENT\"></a>\r\n### constants.MIN_JSON_JS_INDENT : <code>number</code>\r\nThe minimum JSON/JS file indention (0 SPACE).\r\n\r\n**Kind**: instance constant of <code>[Constants](#Constants)</code>  \r\n**Access:** public  \r\n<a name=\"Constants+MIN_YAML_INDENT\"></a>\r\n### constants.MIN_YAML_INDENT : <code>number</code>\r\nThe minimum YAML file indention (1 SPACE).\r\n\r\n**Kind**: instance constant of <code>[Constants](#Constants)</code>  \r\n**Access:** public  \r\n<a name=\"Constants+MAX_INDENT\"></a>\r\n### constants.MAX_INDENT : <code>number</code>\r\nThe maximum file indention (8 SPACEs).\r\n\r\n**Kind**: instance constant of <code>[Constants](#Constants)</code>  \r\n**Access:** public  \r\n<a name=\"Constants+YAML_TO_JS\"></a>\r\n### constants.YAML_TO_JS : <code>string</code>\r\nThe transformation direction YAML -> JS.\r\n\r\n**Kind**: instance constant of <code>[Constants](#Constants)</code>  \r\n**Access:** public  \r\n<a name=\"Constants+YAML_TO_JSON\"></a>\r\n### constants.YAML_TO_JSON : <code>string</code>\r\nThe transformation direction YAML -> JSON.\r\n\r\n**Kind**: instance constant of <code>[Constants](#Constants)</code>  \r\n**Access:** public  \r\n<a name=\"Constants+JS_TO_YAML\"></a>\r\n### constants.JS_TO_YAML : <code>string</code>\r\nThe transformation direction JS -> YAML.\r\n\r\n**Kind**: instance constant of <code>[Constants](#Constants)</code>  \r\n**Access:** public  \r\n<a name=\"Constants+JSON_TO_YAML\"></a>\r\n### constants.JSON_TO_YAML : <code>string</code>\r\nThe transformation direction JSON -> YAML.\r\n\r\n**Kind**: instance constant of <code>[Constants](#Constants)</code>  \r\n**Access:** public  \r\n<a name=\"Constants+JSON_TO_JS\"></a>\r\n### constants.JSON_TO_JS : <code>string</code>\r\nThe transformation direction JSON -> JS.\r\n\r\n**Kind**: instance constant of <code>[Constants](#Constants)</code>  \r\n**Access:** public  \r\n<a name=\"Constants+JS_TO_JSON\"></a>\r\n### constants.JS_TO_JSON : <code>string</code>\r\nThe transformation direction JS -> JSON.\r\n\r\n**Kind**: instance constant of <code>[Constants](#Constants)</code>  \r\n**Access:** public  \r\n<a name=\"Constants+YAML_TO_YAML\"></a>\r\n### constants.YAML_TO_YAML : <code>string</code>\r\nThe transformation direction YAML -> YAML.\r\n\r\n**Kind**: instance constant of <code>[Constants](#Constants)</code>  \r\n**Access:** public  \r\n<a name=\"Constants+JSON_TO_JSON\"></a>\r\n### constants.JSON_TO_JSON : <code>string</code>\r\nThe transformation direction JSON -> JSON.\r\n\r\n**Kind**: instance constant of <code>[Constants](#Constants)</code>  \r\n**Access:** public  \r\n<a name=\"Constants+JS_TO_JS\"></a>\r\n### constants.JS_TO_JS : <code>string</code>\r\nThe transformation direction JS -> JS.\r\n\r\n**Kind**: instance constant of <code>[Constants](#Constants)</code>  \r\n**Access:** public  \r\n<a name=\"Constants+TRANSFORMATIONS\"></a>\r\n### constants.TRANSFORMATIONS : <code>Array.&lt;string&gt;</code>\r\nThe transformation directions.\r\n\r\n**Kind**: instance constant of <code>[Constants](#Constants)</code>  \r\n**Access:** public  \r\n<a name=\"LogWrapper\"></a>\r\n## LogWrapper\r\nClass which defines a `logger` wrapper usable in this module.\r\n       <p>\r\n       **NOTE:** This class is not to be intended to be called from\r\n       outside this module!\r\n\r\n**Kind**: global class  \r\n\r\n* [LogWrapper](#LogWrapper)\r\n    * [new LogWrapper([logger])](#new_LogWrapper_new)\r\n    * [.debug(msg)](#LogWrapper+debug)\r\n    * [.info(msg)](#LogWrapper+info)\r\n    * [.error(msg)](#LogWrapper+error)\r\n    * [.verboseOptions(options)](#LogWrapper+verboseOptions) ⇒\r\n\r\n<a name=\"new_LogWrapper_new\"></a>\r\n### new LogWrapper([logger])\r\nConstructs the `LogWrapper`.\r\n\r\n**Returns**: <code>[LogWrapper](#LogWrapper)</code> - - The instance.  \r\n\r\n| Param | Type | Default | Description |\r\n| --- | --- | --- | --- |\r\n| [logger] | <code>logger</code> &#124; <code>cli</code> &#124; <code>console</code> | <code>console</code> | Logger object. |\r\n\r\n**Example**  \r\n```js\r\nvar logger = ...;\r\nvar logWrapper = new LogWrapper(logger);\r\n```\r\n<a name=\"LogWrapper+debug\"></a>\r\n### logWrapper.debug(msg)\r\nLog the options with DEBUG level (logger supports it, else with INFO).\r\n\r\n**Kind**: instance method of <code>[LogWrapper](#LogWrapper)</code>  \r\n**Access:** public  \r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| msg | <code>string</code> | The message to log. |\r\n\r\n**Example**  \r\n```js\r\nvar logger = ...;\r\nvar logWrapper = new LogWrapper(logger);\r\nvar msg = '...';\r\nlogWrapper.debug(msg);\r\n```\r\n<a name=\"LogWrapper+info\"></a>\r\n### logWrapper.info(msg)\r\nLog the options with INFO level.\r\n\r\n**Kind**: instance method of <code>[LogWrapper](#LogWrapper)</code>  \r\n**Access:** public  \r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| msg | <code>string</code> | The message to log. |\r\n\r\n**Example**  \r\n```js\r\nvar logger = ...;\r\nvar logWrapper = new LogWrapper(logger);\r\nvar msg = '...';\r\nlogWrapper.info(msg);\r\n```\r\n<a name=\"LogWrapper+error\"></a>\r\n### logWrapper.error(msg)\r\nLog the options with ERROR level.\r\n\r\n**Kind**: instance method of <code>[LogWrapper](#LogWrapper)</code>  \r\n**Access:** public  \r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| msg | <code>string</code> | The message to log. |\r\n\r\n**Example**  \r\n```js\r\nvar logger = ...;\r\nvar logWrapper = new LogWrapper(logger);\r\nvar msg = '...';\r\nlogWrapper.error(msg);\r\n```\r\n<a name=\"LogWrapper+verboseOptions\"></a>\r\n### logWrapper.verboseOptions(options) ⇒\r\nLog the options with INFO level.\r\n\r\n**Kind**: instance method of <code>[LogWrapper](#LogWrapper)</code>  \r\n**Returns**: A Promise containing the passed `options` object.  \r\n**Access:** public  \r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| options | <code>[Options](#Options)</code> | The properties to log with INFO. |\r\n\r\n**Example**  \r\n```js\r\nvar logger = ...;\r\nvar logWrapper = new LogWrapper(logger);\r\nvar options = {\r\n    ...\r\n};\r\nlogWrapper.verboseOptions(options)\r\n    then(function (options) {\r\n        ...\r\n    });\r\n```\r\n<a name=\"Middleware\"></a>\r\n## Middleware\r\nClass which defines middleware Promises usable in or with this module.\r\n\r\n**Kind**: global class  \r\n\r\n* [Middleware](#Middleware)\r\n    * [new Middleware()](#new_Middleware_new)\r\n    * [.ensureMiddleware(middleware)](#Middleware+ensureMiddleware) ⇒ <code>Promise</code>\r\n\r\n<a name=\"new_Middleware_new\"></a>\r\n### new Middleware()\r\nConstructs the `Middleware`.\r\n\r\n**Returns**: <code>[Middleware](#Middleware)</code> - - The instance.  \r\n**Example**  \r\n```js\r\nvar middleware = require('./lib/middleware.js');\r\n```\r\n<a name=\"Middleware+ensureMiddleware\"></a>\r\n### middleware.ensureMiddleware(middleware) ⇒ <code>Promise</code>\r\nEnsure that the given middleware Promise is a function if set.\r\nIf not set a new JSON 'identity' Promise is returned which simply passes\r\na JSON object.\r\n\r\n**Kind**: instance method of <code>[Middleware](#Middleware)</code>  \r\n**Returns**: <code>Promise</code> - The given middleware Promise or a new JSON 'identity' middleware Promise.  \r\n**Throws**:\r\n\r\n- <code>TypeError</code> Will throw this error when the passed `middleware`\r\n        is not type of `Function`.\r\n\r\n**Access:** public  \r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| middleware | <code>function</code> | This middleware Promise can be used to intercept        the JSON object for altering he passed JSON, the function signature is:        ```        function(json)        ```        The Promise has to return the processed JSON! |\r\n\r\n**Example**  \r\n```js\r\nvar middleware = require('./lib/middleware.js');\r\nvar myMiddleware = function(json) {\r\n    ...\r\n};\r\ntransformer.transform(options, middleware.ensureMiddleware(myMiddleware))\r\n    .then(function(json) {\r\n        ...\r\n    }):\r\n```\r\n<a name=\"OptionsHandler\"></a>\r\n## OptionsHandler\r\nClass which defines some useful methods to initialize and prepare the\r\n       transformation options used in this module.\r\n       <p>\r\n       **NOTE:** This class is not to be intended to be called from\r\n       outside this module!\r\n\r\n**Kind**: global class  \r\n\r\n* [OptionsHandler](#OptionsHandler)\r\n    * [new OptionsHandler([logger])](#new_OptionsHandler_new)\r\n    * [.ensureOptions(options)](#OptionsHandler+ensureOptions) ⇒ <code>Promise</code>\r\n    * [.validateTransformation(options)](#OptionsHandler+validateTransformation) ⇒ <code>Promise</code>\r\n\r\n<a name=\"new_OptionsHandler_new\"></a>\r\n### new OptionsHandler([logger])\r\nConstructs the `OptionsHandler` with an (optional) logger.\r\n\r\n**Returns**: <code>[OptionsHandler](#OptionsHandler)</code> - The instance.  \r\n\r\n| Param | Type | Default | Description |\r\n| --- | --- | --- | --- |\r\n| [logger] | <code>logger</code> &#124; <code>cli</code> &#124; <code>console</code> | <code>console</code> | Logger object. |\r\n\r\n**Example**  \r\n```js\r\nvar OptionsHandler = require('./options-handler.js');\r\nvar logger = ...;\r\n\r\nvar optionsHandler = new OptionsHandler(logger);\r\n```\r\n<a name=\"OptionsHandler+ensureOptions\"></a>\r\n### optionsHandler.ensureOptions(options) ⇒ <code>Promise</code>\r\nThis method ensures that the options object is set with all necessary and\r\ncorrect values. The method does not alter the given object, but creates\r\nand fills a new instance from the given values and/or default ones.\r\n\r\n**Kind**: instance method of <code>[OptionsHandler](#OptionsHandler)</code>  \r\n**Returns**: <code>Promise</code> - - A Promise containing a new and complete `options` object.  \r\n**Access:** public  \r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| options | <code>[Options](#Options)</code> | The configuration for a transformation. |\r\n\r\n**Example**  \r\n```js\r\nvar OptionsHandler = require('./options-handler.js');\r\nvar logger = ...;\r\nvar options = {...};\r\nvar optionsHandler = new OptionsHandler(logger);\r\noptionsHandler.ensureOptions(options)\r\n    .then(function (ensuredOptions) {\r\n        ...\r\n    });\r\n```\r\n<a name=\"OptionsHandler+validateTransformation\"></a>\r\n### optionsHandler.validateTransformation(options) ⇒ <code>Promise</code>\r\nThis method validates the transformation process described by the given\r\noptions and provides the validate and enriched options and according name\r\nto resolve a proper function.\r\n\r\n**Kind**: instance method of <code>[OptionsHandler](#OptionsHandler)</code>  \r\n**Returns**: <code>Promise</code> - - A Promise containing the passed `options` object and a 'transformation' string in an array.  \r\n**Access:** public  \r\n**See**: [transformations](transformations)  \r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| options | <code>[Options](#Options)</code> | The configuration for a transformation. |\r\n\r\n**Example**  \r\n```js\r\nvar OptionsHandler = require('./options-handler.js');\r\nvar logger = ...;\r\nvar optionsHandler = new OptionsHandler(logger);\r\noptionsHandler.validateTransformation(options)\r\n    .spread(function (validatedOptions, transformation) {\r\n        ...\r\n    )):\r\n```\r\n<a name=\"Reader\"></a>\r\n## Reader\r\nThis class provides utility methods usable to read YAML, JSON or JS\r\n       from a file to JS memory objects.\r\n\r\n**Kind**: global class  \r\n\r\n* [Reader](#Reader)\r\n    * [new Reader([logger])](#new_Reader_new)\r\n    * [.readJs(src)](#Reader+readJs) ⇒ <code>Promise</code>\r\n    * [.readYaml(src)](#Reader+readYaml) ⇒ <code>Promise</code>\r\n\r\n<a name=\"new_Reader_new\"></a>\r\n### new Reader([logger])\r\nConstructs the `Reader` with an (optional) logger.\r\n\r\n**Returns**: <code>[Reader](#Reader)</code> - The instance.  \r\n\r\n| Param | Type | Default | Description |\r\n| --- | --- | --- | --- |\r\n| [logger] | <code>logger</code> &#124; <code>cli</code> &#124; <code>console</code> | <code>console</code> | Logger object. |\r\n\r\n**Example**  \r\n```js\r\nvar Reader = require('jy-transform').Reader;\r\nvar logger = ...;\r\n\r\nvar reader = new Reader(logger);\r\n```\r\n<a name=\"Reader+readJs\"></a>\r\n### reader.readJs(src) ⇒ <code>Promise</code>\r\nReads the data from a given _*.js_ or _*.json_ file source.\r\n\r\n**Kind**: instance method of <code>[Reader](#Reader)</code>  \r\n**Returns**: <code>Promise</code> - - Containing the JSON object.  \r\n**Access:** public  \r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| src | <code>string</code> &#124; <code>Readable</code> &#124; <code>object</code> | The JS/JSON source file to read. |\r\n\r\n**Example**  \r\n```js\r\nvar Reader = require('jy-transform').Reader;\r\nvar logger = ...;\r\n\r\nvar reader = new Reader(logger);\r\nreader.readJs('./my.js')\r\n    .then(function (json){\r\n        logger.info(JSON.stringify(json));\r\n    })\r\n    .catch(function (err) {\r\n        logger.error(err.stack);\r\n    });\r\n\r\nreader.readJs('./my.json')\r\n    .then(function (json){\r\n        logger.info(JSON.stringify(json));\r\n    })\r\n    .catch(function (err) {\r\n        logger.error(err.stack);\r\n    });\r\n```\r\n<a name=\"Reader+readYaml\"></a>\r\n### reader.readYaml(src) ⇒ <code>Promise</code>\r\nLoads a single YAML file containing document and turns a JS object.\r\n\r\n*NOTE:* This function does not understand multi-document sources, it throws\r\nexception on those.\r\n\r\n**Kind**: instance method of <code>[Reader](#Reader)</code>  \r\n**Returns**: <code>Promise</code> - - Containing the JSON object.  \r\n**Access:** public  \r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| src | <code>string</code> &#124; <code>Readable</code> &#124; <code>object</code> | The YAML source file to read. |\r\n\r\n**Example**  \r\n```js\r\nvar Reader = require('jy-transform').Reader;\r\nvar logger = ...;\r\n\r\nvar reader = new Reader(logger);\r\nreader.readYaml('./my.yaml')\r\n    .then(function (json){\r\n        logger.info(JSON.stringify(json));\r\n    })\r\n    .catch(function (err) {\r\n        logger.error(err.stack);\r\n    });\r\n```\r\n<a name=\"Transformer\"></a>\r\n## Transformer\r\nThis class provides all methods usable to handle YAML, JSON and JS and\r\n       their transformations.\r\n\r\n**Kind**: global class  \r\n\r\n* [Transformer](#Transformer)\r\n    * [new Transformer([logger])](#new_Transformer_new)\r\n    * _instance_\r\n        * [.transform(options, [middleware])](#Transformer+transform) ⇒ <code>Promise</code>\r\n    * _inner_\r\n        * [~ensureMiddleware](#Transformer..ensureMiddleware)\r\n\r\n<a name=\"new_Transformer_new\"></a>\r\n### new Transformer([logger])\r\nConstructs the `Transformer` with options and an (optional) logger.\r\n\r\n**Returns**: <code>[Transformer](#Transformer)</code> - - The instance.  \r\n\r\n| Param | Type | Default | Description |\r\n| --- | --- | --- | --- |\r\n| [logger] | <code>logger</code> &#124; <code>cli</code> &#124; <code>console</code> | <code>console</code> | Logger object. |\r\n\r\n**Example**  \r\n```js\r\nvar logger = ...;\r\nvar Transformer = require('jy-transform');\r\nvar transformer = new Transformer(logger);\r\n```\r\n<a name=\"Transformer+transform\"></a>\r\n### transformer.transform(options, [middleware]) ⇒ <code>Promise</code>\r\nThe entry method for all transformation accepting a configuration object and\r\nan (optional) middleware function.\r\n\r\n**Kind**: instance method of <code>[Transformer](#Transformer)</code>  \r\n**Returns**: <code>Promise</code> - - Containing the transformation result as message (e.g.\r\n         to be logged by caller).  \r\n**Throws**:\r\n\r\n- <code>TypeError</code> - Will throw this error when the passed `middleware`\r\n        is not type of `Function`.\r\n- <code>Error</code> - Will throw plain error when writing to file failed due to any reason.\r\n\r\n**Access:** public  \r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| options | <code>[Options](#Options)</code> | The configuration for a transformation. |\r\n| [middleware] | <code>function</code> | This middleware Promise can be used to intercept        the JSON object for altering the passed JSON, the function signature is:        ```        function(json)        ```        <p>        **NOTE:** the Promise has to return the processed JSON! |\r\n\r\n**Example**  \r\n```js\r\nvar Transformer = require('jy-transform');\r\nvar transformer = new Transformer(logger);\r\nvar Promise = require('bluebird');\r\nvar logger = ...;\r\nvar options = {...};\r\nvar middleware = function (json) {\r\n    json.myproperty = 'new value';\r\n    return Promise.resolve(json);\r\n};\r\n\r\ntransformer.transform(options, middleware)\r\n    .then(function (msg){\r\n        logger.info(msg);\r\n    })\r\n    .catch(function (err) {\r\n        logger.error(err.stack);\r\n    });\r\n```\r\n<a name=\"Transformer..ensureMiddleware\"></a>\r\n### Transformer~ensureMiddleware\r\nEnsures that basic middleware is set.\r\n\r\n**Kind**: inner property of <code>[Transformer](#Transformer)</code>  \r\n<a name=\"Writer\"></a>\r\n## Writer\r\nThis class provides utility methods usable to write JSON/JS/YAML\r\n       from memory to a JSON/JS/YAML file.\r\n\r\n**Kind**: global class  \r\n\r\n* [Writer](#Writer)\r\n    * [new Writer([logger])](#new_Writer_new)\r\n    * [.writeYaml(json, options)](#Writer+writeYaml) ⇒ <code>Promise</code>\r\n    * [.writeJson(json, options)](#Writer+writeJson) ⇒ <code>Promise</code>\r\n    * [.writeJs(json, options)](#Writer+writeJs) ⇒ <code>Promise</code>\r\n\r\n<a name=\"new_Writer_new\"></a>\r\n### new Writer([logger])\r\nConstructs the `Writer` with an (optional) logger.\r\n\r\n**Returns**: <code>[Writer](#Writer)</code> - The instance.  \r\n\r\n| Param | Type | Default | Description |\r\n| --- | --- | --- | --- |\r\n| [logger] | <code>logger</code> &#124; <code>cli</code> &#124; <code>console</code> | <code>console</code> | Logger object. |\r\n\r\n**Example**  \r\n```js\r\nvar Writer = require('jy-transform').Writer;\r\nvar logger = ...;\r\n\r\nvar writer = new Writer(logger);\r\n```\r\n<a name=\"Writer+writeYaml\"></a>\r\n### writer.writeYaml(json, options) ⇒ <code>Promise</code>\r\nWrites a JSON object to a _*.yaml_ file.\r\n\r\n**Kind**: instance method of <code>[Writer](#Writer)</code>  \r\n**Returns**: <code>Promise</code> - - Containing the write success message to handle by caller (e.g. for logging).  \r\n**Throws**:\r\n\r\n- <code>Error</code> - If YAML file could not be written due to any reason.\r\n\r\n**Access:** public  \r\n**See**\r\n\r\n- [MIN_YAML_INDENT](#Constants+MIN_YAML_INDENT)\r\n- [DEFAULT_INDENT](#Constants+DEFAULT_INDENT)\r\n- [MAX_INDENT](#Constants+MAX_INDENT)\r\n\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| json | <code>object</code> | The JSON to write into _*.yaml_ file. |\r\n| options | <code>[Options](#Options)</code> | The write destination and indention. |\r\n\r\n**Example**  \r\n```js\r\nvar Writer = require('jy-transform').Writer;\r\nvar logger = ...;\r\nvar json = {...},\r\nvar options = {\r\n    dest: 'result.yml',\r\n    indent: 2\r\n}\r\n\r\nvar writer = new Writer(logger);\r\nwriter.writeYaml(json, options)\r\n    .then(function (msg){\r\n        logger.info(msg);\r\n    })\r\n    .catch(function (err) {\r\n        logger.error(err.stack);\r\n    });\r\n```\r\n<a name=\"Writer+writeJson\"></a>\r\n### writer.writeJson(json, options) ⇒ <code>Promise</code>\r\nWrites a JSON object to a _*.json_ file.\r\n\r\n**Kind**: instance method of <code>[Writer](#Writer)</code>  \r\n**Returns**: <code>Promise</code> - - Containing the write success message to handle by caller (e.g. for logging).  \r\n**Access:** public  \r\n**See**\r\n\r\n- [MIN_JSON_JS_INDENT](#Constants+MIN_JSON_JS_INDENT)\r\n- [DEFAULT_INDENT](#Constants+DEFAULT_INDENT)\r\n- [MAX_INDENT](#Constants+MAX_INDENT)\r\n\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| json | <code>object</code> | The JSON to write into _*.json_ file. |\r\n| options | <code>[Options](#Options)</code> | The write destination and indention. |\r\n\r\n**Example**  \r\n```js\r\nvar Writer = require('jy-transform').Writer;\r\nvar logger = ...;\r\nvar json = {...};\r\nvar options = {\r\n    dest: 'result.yml',\r\n    indent: 2\r\n}\r\n\r\nvar writer = new Writer(logger);\r\nwriter.writeJson(json, options)\r\n    .then(function (msg){\r\n        logger.info(msg);\r\n    })\r\n    .catch(function (err) {\r\n        logger.error(err.stack);\r\n    });\r\n```\r\n<a name=\"Writer+writeJs\"></a>\r\n### writer.writeJs(json, options) ⇒ <code>Promise</code>\r\nWrites a JSON object to a _*.js_ file. The object is prefixed by `module.exports = `.\r\n\r\n**Kind**: instance method of <code>[Writer](#Writer)</code>  \r\n**Returns**: <code>Promise</code> - - Containing the write success message to handle by caller (e.g. for logging).  \r\n**Access:** public  \r\n**See**\r\n\r\n- [MIN_JSON_JS_INDENT](#Constants+MIN_JSON_JS_INDENT)\r\n- [DEFAULT_INDENT](#Constants+DEFAULT_INDENT)\r\n- [MAX_INDENT](#Constants+MAX_INDENT)\r\n\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| json | <code>object</code> | The JSON to write into _*.js_ file. |\r\n| options | <code>[Options](#Options)</code> | The write destination and indention. |\r\n\r\n**Example**  \r\n```js\r\nvar Writer = require('jy-transform').Writer;\r\nvar logger = ...;\r\nvar json = {...};\r\nvar options = {\r\n    dest: 'result.yml',\r\n    indent: 2\r\n}\r\n\r\nvar writer = new Writer(logger);\r\nwriter.writeJs(json, options)\r\n    .then(function (msg){\r\n        logger.info(msg);\r\n    })\r\n    .catch(function (err) {\r\n        logger.error(err.stack);\r\n    });\r\n```\r\n<a name=\"Options\"></a>\r\n## Options : <code>object</code>\r\n**Kind**: global typedef  \r\n**Properties**\r\n\r\n| Name | Type | Default | Description |\r\n| --- | --- | --- | --- |\r\n| origin | <code>string</code> | <code>&quot;yaml&quot;</code> | The origin type. |\r\n| target | <code>string</code> | <code>&quot;js&quot;</code> | The target type. |\r\n| src | <code>string</code> &#124; <code>Readable</code> &#124; <code>object</code> |  | The source. |\r\n| dest | <code>string</code> &#124; <code>Writable</code> &#124; <code>object</code> |  | The destination. |\r\n| indent | <code>number</code> | <code>4</code> | The indention in files. |\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}
