{
  "name": "jy-transform",
  "tagline": "This project aims to read, write and transform YAML, JS or JSON objects into each other using CLI or API. The source and destination resources can be files, objects or streams.",
  "body": "![jy-transform logo](https://raw.githubusercontent.com/deadratfink/jy-transform/master/image/jytransform.png)\r\n\r\n# Stats\r\n\r\n| [Github License](https://github.com/deadratfink/jy-transform/blob/master/LICENSE.md) | [Github Issues](https://github.com/deadratfink/jy-transform/issues) | [Github Release](https://github.com/deadratfink/jy-transform/releases) | [Github Tags](https://github.com/deadratfink/jy-transform/tags) | [Travis CI](https://travis-ci.org) | [Waffle](https://waffle.io/deadratfink/jy-transform) | [Code Climate](https://codeclimate.com/github/deadratfink/jy-transform) |\r\n| --- | --- | --- | --- | --- | --- | --- |\r\n| [![License][gh-license-image]][gh-license-url] | [![Issue Stats][gh-issues-image]][gh-issues-url] | [![Github Releases][gh-releases-image]][gh-releases-url] | [![Github Tags][gh-tags-image]][gh-tags-url] | [![Build Status][ci-image]][ci-url] | [![Waffle][waffle-image]][waffle-url] | [![Code Climate][cocl-image]][cocl-url] |\r\n\r\n| Branch | [Codecov](https://codecov.io) | [Coveralls](https://coveralls.io) | [Inch CI](http://inch-ci.org) | [David](https://david-dm.org) DM | [David](https://david-dm.org) DM (dev) |\r\n| --- | --- | --- | --- | --- | --- |\r\n| master | [![codecov.io][cc-image-master]][cc-url-master]           | [![coveralls.io][ca-image-master]][ca-url-master]           | [![inch-ci.org][inch-image-master]][inch-url-master]           | [![Dependency Status][dep-image-master]][dep-url-master]           | [![devDependency Status][devdep-image-master]][devdep-url-master] |\r\n| development | [![codecov.io][cc-image-development]][cc-url-development] | [![coveralls.io][ca-image-development]][ca-url-development] | [![inch-ci.org][inch-image-development]][inch-url-development] | [![Dependency Status][dep-image-development]][dep-url-development] | [![devDependency Status][devdep-image-development]][devdep-url-development] |\r\n\r\n## Coverage Graphs\r\n\r\n| Branch | Graph |\r\n| --- | --- |\r\n| master | ![codecov.io](https://codecov.io/github/deadratfink/jy-transform/branch.svg?branch=master&vg=true) |\r\n| development| ![codecov.io](https://codecov.io/github/deadratfink/jy-transform/branch.svg?branch=development&vg=true) |\r\n\r\n\r\n[gh-license-image]: https://img.shields.io/github/license/deadratfink/jy-transform.svg?style=flat-square\r\n[gh-license-url]: https://github.com/deadratfink/jy-transform/blob/master/LICENSE.md\r\n\r\n[gh-issues-image]: https://img.shields.io/github/issues/deadratfink/jy-transform.svg?style=flat-square\r\n[gh-issues-url]: https://github.com/deadratfink/jy-transform/issues\r\n\r\n[gh-releases-image]: https://img.shields.io/github/release/deadratfink/jy-transform.svg?style=flat-square\r\n[gh-releases-url]: https://github.com/deadratfink/jy-transform/releases\r\n\r\n[gh-tags-image]: https://img.shields.io/github/tag/deadratfink/jy-transform.svg?style=flat-square\r\n[gh-tags-url]: https://github.com/deadratfink/jy-transform/tags\r\n\r\n\r\n[ci-image]: https://img.shields.io/travis/deadratfink/jy-transform.svg?style=flat-square\r\n[ci-url]: https://travis-ci.org/deadratfink/jy-transform/branches\r\n\r\n[is-pull-image]: http://issuestats.com/github/deadratfink/jy-transform/badge/pr?style=flat-square\r\n[is-issue-image]: http://issuestats.com/github/deadratfink/jy-transform/badge/issue?style=flat-square\r\n[is-url]: http://issuestats.com/github/deadratfink/jy-transform\r\n\r\n[waffle-image]: https://badge.waffle.io/deadratfink/jy-transform.png?label=ready&title=Ready&style=flat-square\r\n[waffle-url]: https://waffle.io/deadratfink/jy-transform\r\n\r\n[cocl-image]: https://img.shields.io/codeclimate/github/deadratfink/jy-transform.svg?style=flat-square\r\n[cocl-url]: https://codeclimate.com/github/deadratfink/jy-transform\r\n\r\n\r\n[cc-image-master]: https://img.shields.io/codecov/c/github/deadratfink/jy-transform/master.svg?style=flat-square\r\n[cc-url-master]: https://codecov.io/github/deadratfink/jy-transform?branch=master\r\n[cc-image-development]: https://img.shields.io/codecov/c/github/deadratfink/jy-transform/development.svg?style=flat-square\r\n[cc-url-development]: https://codecov.io/github/deadratfink/jy-transform?branch=development\r\n\r\n[ca-image-master]: https://img.shields.io/coveralls/deadratfink/jy-transform/master.svg?style=flat-square\r\n[ca-url-master]: https://coveralls.io/github/deadratfink/jy-transform?branch=master\r\n[ca-image-development]: https://img.shields.io/coveralls/deadratfink/jy-transform/development.svg?style=flat-square\r\n[ca-url-development]: https://coveralls.io/github/deadratfink/jy-transform?branch=development\r\n\r\n\r\n[inch-image-master]: https://inch-ci.org/github/deadratfink/jy-transform.svg?branch=master&style=flat-square\r\n[inch-url-master]: https://inch-ci.org/github/deadratfink/jy-transform?branch=master\r\n[inch-image-development]: https://inch-ci.org/github/deadratfink/jy-transform.svg?branch=development&style=flat-square\r\n[inch-url-development]: https://inch-ci.org/github/deadratfink/jy-transform?branch=development\r\n\r\n[dep-image-master]: https://img.shields.io/david/deadratfink/jy-transform/master.svg?style=flat-square\r\n[dep-url-master]: https://david-dm.org/deadratfink/jy-transform/master\r\n[dep-image-development]: https://img.shields.io/david/deadratfink/jy-transform/development.svg?style=flat-square\r\n[dep-url-development]: https://david-dm.org/deadratfink/jy-transform/development\r\n\r\n[devdep-image-master]: https://img.shields.io/david/dev/deadratfink/jy-transform/master.svg?style=flat-square\r\n[devdep-url-master]: https://david-dm.org/deadratfink/jy-transform/master#info=devDependencies\r\n[devdep-image-development]: https://img.shields.io/david/dev/deadratfink/jy-transform/development.svg?style=flat-square\r\n[devdep-url-development]: https://david-dm.org/deadratfink/jy-transform/development#info=devDependencies\r\n\r\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\r\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\r\n# TOC\r\n\r\n- [jy-transform](#jy-transform)\r\n  - [Installation](#installation)\r\n  - [Tests](#tests)\r\n  - [Dependencies](#dependencies)\r\n  - [Dev Dependencies](#dev-dependencies)\r\n  - [License](#license)\r\n  - [Motivation](#motivation)\r\n- [Usage](#usage)\r\n  - [Usage Types](#usage-types)\r\n  - [Use Cases](#use-cases)\r\n  - [Limitations](#limitations)\r\n  - [CLI Usage](#cli-usage)\r\n  - [Origin and Target Type Inference](#origin-and-target-type-inference)\r\n  - [API Usage](#api-usage)\r\n  - [Using Custom Logger](#using-custom-logger)\r\n- [API Reference](#api-reference)\r\n- [Changelog](#changelog)\r\n- [Contributing](#contributing)\r\n\r\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\r\n\r\n# jy-transform \r\n\r\nThis project aims to read, write and transform YAML, JS or JSON objects into each other using CLI or API. The source and destination resources can be files on CLI and additionally, objects or streams on API level. Besides the transformation feature this module can also be used for simple loading and/or writing YAML, JS or JSON files.\r\n\r\n## Installation\r\n\r\nDownload node at [nodejs.org](http://nodejs.org) and install it, if you haven't already.\r\n\r\n```sh\r\nnpm install jy-transform --global\r\n```\r\n\r\n\r\n## Tests\r\n\r\n```sh\r\nnpm install\r\nnpm test\r\n```\r\n\r\n## Dependencies\r\n\r\n- [bluebird](https://github.com/petkaantonov/bluebird): Full featured Promises/A+ implementation with exceptionally good performance\r\n- [cli](https://github.com/chriso/cli): A tool for rapidly building command line apps\r\n- [is-stream](https://github.com/sindresorhus/is-stream): Check if something is a Node.js stream\r\n- [js-yaml](https://github.com/nodeca/js-yaml): YAML 1.2 parser and serializer\r\n- [json-stringify-safe](https://github.com/isaacs/json-stringify-safe): Like JSON.stringify, but doesn&#39;t blow up on circular refs.\r\n- [mkdirp-then](https://github.com/fs-utils/mkdirp-then): mkdirp as promised\r\n- [serialize-js](https://github.com/RReverser/serialize-js): User-readable object serialization for JavaScript.\r\n\r\n## Dev Dependencies\r\n\r\n- [codeclimate-test-reporter](https://github.com/codeclimate/javascript-test-reporter): Code Climate test reporter client for javascript projects\r\n- [codecov](https://github.com/codecov/codecov-node): Uploading report to Codecov: https://codecov.io\r\n- [coveralls](https://github.com/nickmerwin/node-coveralls): takes json-cov output into stdin and POSTs to coveralls.io\r\n- [doctoc](https://github.com/thlorenz/doctoc): Generates TOC for markdown files of local git repo.\r\n- [fs-extra](https://github.com/jprichardson/node-fs-extra): fs-extra contains methods that aren&#39;t included in the vanilla Node.js fs package. Such as mkdir -p, cp -r, and rm -rf.\r\n- [istanbul](https://github.com/gotwarlost/istanbul): Yet another JS code coverage tool that computes statement, line, function and branch coverage with module loader hooks to transparently add coverage when running tests. Supports all JS coverage use cases including unit tests, server side functional tests \r\n- [jsdoc-parse](https://github.com/jsdoc2md/jsdoc-parse): Jsdoc-annotated source code in, JSON format documentation out.\r\n- [jsdoc-to-markdown](https://github.com/jsdoc2md/jsdoc-to-markdown): jsdoc-annotated source in, markdown API docs out.\r\n- [mocha](https://github.com/mochajs/mocha): simple, flexible, fun test framework\r\n- [mocha-lcov-reporter](https://github.com/StevenLooman/mocha-lcov-reporter): LCOV reporter for Mocha\r\n- [object-path](https://github.com/mariocasciaro/object-path): Access deep properties using a path\r\n- [package-json-to-readme](https://github.com/zeke/package-json-to-readme): Generate a README.md from package.json contents\r\n- [winston](https://github.com/winstonjs/winston): A multi-transport async logging library for Node.js\r\n\r\n\r\n## License\r\n\r\nSEE LICENSE IN [LICENSE.md](https://github.com/deadratfink/jy-transform/blob/master/LICENSE.md)\r\n\r\n## Motivation\r\n\r\nWhy this module? After struggling with some huge YAML file and accidentally \r\noccurring wrong indentions which results in an annoying failure investigation, \r\nI decided to get rid of the YAML file and therefore, create a module which \r\nshould be aimed as the swiss army knife for transforming YAML, JS and JSON \r\ntypes into each other format.\r\n\r\n# Usage\r\n\r\nThe module can be used on CLI or as API (the latter is fully [Promise](http://bluebirdjs.com/docs/api-reference.html) \r\nbased).\r\n\r\n## Usage Types\r\n\r\nSince the module can be used in two different ways, use installation as follows:\r\n\r\n- CLI: install globally via `-g` option\r\n- API: install locally\r\n\r\nBoth usage types are described in more detail in the following sections.\r\n\r\n## Use Cases\r\n\r\nSo, what are the typical use cases for this module? In terms of _transformation_\r\nthese consists of different phases:\r\n\r\n- Reading files (`Reader`)\r\n- Transforming JSON objects (`Transformer`)\r\n- Apply dedicated actions on the intermediate JSON objects (`Transformer` + `Middleware`)\r\n- Writing files (`Writer`)\r\n\r\n### Reading\r\n\r\nReading from:\r\n\r\n- _*.yaml_ file\r\n- _*.js_ file\r\n- _*.json_ file\r\n\r\nAdditionally, on API level:\r\n\r\n- `stream.Readable` (requires `options.origin` property set, reads as UTF-8)\r\n- any JS `object` (actually, this means the reading phase is skipped, because object is in-memory already)\r\n\r\n### Transformation\r\n\r\nThe transformation can take place into several directions:\r\n\r\n- YAML => JS\r\n- YAML => JSON\r\n- JS   => YAML\r\n- JSON => YAML \r\n- JS   => JSON \r\n- JSON => JS \r\n- YAML => YAML     \r\n- JSON => JSON\r\n- JS   => JS       \r\n\r\nwhile:\r\n\r\n- [YAML](http://http://yaml.org/) = _*.yaml_, _*.yml_\r\n- [JS](https://developer.mozilla.org/en-US/docs/Web/JavaScript) = _*.js_   (JS object)  \r\n- [JSON](http://json.org) = _*.json_ (JS object serialized as JSON)\r\n\r\n### Middleware\r\n\r\nApply actions on the intermediate JS object via injected [Promise](http://bluebirdjs.com/docs/api-reference.html) \r\nfunctions. This is an optional part for [transformation](#transformation) phase.\r\n\r\n### Writing\r\n\r\nWriting to:\r\n\r\n- _*.yaml_ file\r\n- _*.js_ file\r\n- _*.json_ file\r\n\r\nAdditionally, on API level:\r\n\r\n- `stream.Writable`  (requires `options.target` property set, writes UTF-8)\r\n- any JS `object`\r\n\r\n## Limitations\r\n\r\n- Since this module is build to transform from and to different type formats, any \r\n  `Function`s residing in JS type objects are _not_ supported, e.g. transforming\r\n  ```javascript\r\n  module.exports = {\r\n      fooKey: 'foo',\r\n      fooFunction: foo() {...}\r\n  }\r\n  ```\r\n  to JSON would simply result in \r\n  ```javascript\r\n  {\r\n      fooKey: 'foo'\r\n  }\r\n  ```\r\n  while transforming to YAML type would even result in an `Error`, e.g. printed \r\n  on CLI usage like this:\r\n  ```\r\n  ERROR: YAMLException: unacceptable kind of an object to dump [object Function]\r\n  ```\r\n- Multidocument handling would be a cool feature which refers in general to YAML \r\n  and JS only, but at the moment we require that each document to transform is a \r\n  _single_ one per source (or in case of JS could be identified)! This feature is \r\n  planned and reflected in [#14](https://github.com/deadratfink/jy-transform/issues/14).\r\n- Schema validation for input and output is another topic which is planned by \r\n  [#1](https://github.com/deadratfink/jy-transform/issues/1) and \r\n  [#2](https://github.com/deadratfink/jy-transform/issues/2).\r\n\r\n## CLI Usage\r\n\r\nThe CLI provides the `jyt` command (actually, this requires the use of options). \r\nAfter the global installation you can access the `Transformer` command options \r\nwith the usual help command as follows:\r\n\r\n```\r\n$ jyt --help\r\n```\r\n\r\n### CLI Options\r\n\r\nThe `--help` option prints an overview about all available CLI properties:\r\n\r\n```\r\n$ jyt --help\r\nUsage:\r\n  jyt [OPTIONS]\r\n\r\nOptions: \r\n  -o, --origin [STRING]  The conversion origin: [ js | json | yaml ]. (Default is : if not given, the type is tried to be inferred from the extension of source path, else it is yaml)\r\n  -t, --target [STRING]  The conversion target: [ js | json | yaml ]. (Default is : if not given, the type is tried to be inferred from the extension of destination path, else it is js)\r\n  -s, --src PATH         The absolute/relative input file path.\r\n  -d, --dest [PATH]      The absolute/relative output file path. When this \r\n                         options is ommited then the output file is stored \r\n                         relative to the input file (same base name but with \r\n                         another extension if type differs). If input and \r\n                         output type are the same then the file overwriting is \r\n                         handled depending on the '--force' value!  (Default is storing relative to input file)\r\n  -i, --indent [NUMBER]  The indention for pretty-print: 1 - 8.  (Default is 4)\r\n  -f, --force            Force overwriting of existing output files on write \r\n                         phase. When files are not overwritten (which is \r\n                         default), then the next transformation with same \r\n                         output file name gets a consecutive number on the base \r\n                         file name, e.g. in case of foo.yaml it would be \r\n                         foo(1).yaml.\r\n  -m, --imports STRING   Define a 'module.exports[.identifier] = ' \r\n                         identifier (to read from JS _source_ file only, must \r\n                         be a valid JS identifier!).                          \r\n  -x, --exports STRING   Define a 'module.exports[.identifier] = ' \r\n                         identifier, for usage in JS destination file only, \r\n                         must be a valid JS identifier! \r\n  -k, --no-color         Omit color from output\r\n      --debug            Show debug information\r\n  -v, --version          Display the current version\r\n  -h, --help             Display help and usage details\r\n```\r\n\r\nThese are more formally defined in the following table: \r\n\r\n| Option (short) | Option (long) | Type | Description | Default | Required |\r\n| --- | --- | --- | --- | --- | --- |\r\n| `-o` | `--origin` | [ _js_ &#124; _json_ &#124; _yaml_ ]</code> | The transformation origin type. | if not given, the type is tried to be inferred from the extension of source path, else it is _yaml_ | no |\r\n| `-t` | `--target` | [ _js_ &#124; _json_ &#124; _yaml_ ]</code> | The transformation target type. | if not given, the type is tried to be inferred from the extension of destination path, else it is _js_ | no |\r\n| `-s` | `--src` | URI | The source file path for transformation. | - | yes |\r\n| `-d` | `--dest` | URI | The destination file path to transform to. | When this options is ommited then the output file is stored relative to the input file (same base name but with another extension if type differs). If input and output type are the same then the file overwriting is handled depending on the `--force` value! | no |\r\n| `-i` | `--indent` | integer<br> - [ 1 - 8 ]<br> | The code indention used in destination files. | 4 | no |\r\n| `-f` | `--force` | n/a | Force overwriting of existing output files on write phase. When files are not overwritten (which is default), then the next transformation with same output file name gets a consecutive number on the base file name, e.g. in case of foo.yaml it would be foo(1).yaml.  | _false_ | no |\r\n| `-m` | `--imports` | string | Define a 'module.exports[.identifier] = ' identifier (to read from JS _source_ file only, must be a valid JS identifier!) | _undefined_ | no |\r\n| `-x` | `--exports` | string | Define a 'module.exports[.identifier] = ' identifier (for usage in JS _destination_ file only, must be a valid JS identifier!) | _undefined_ | no |\r\n| `-k` | `--no-color` | n/a | Omit color from output. | _color_ | no |\r\n|  n/a | `--debug` | n/a | Show debug information. | _false_ | no |\r\n| `-v` | `--version` | n/a | Display the current version. | n/a | no |\r\n| `-h` | `--help` | n/a | Display help and usage details. | n/a | no |\r\n\r\n\r\n\r\n**NOTE:** an invalid indention setting (1 > `-i`, `--indent` > 8) does not raise an error but a default of 4 SPACEs is applied instead.\r\n\r\n### Examples\r\n\r\nNow we know which properties we can apply on CLI, so let's assume we \r\nhave a YAML file located in _foo.yaml_ holding this data:\r\n\r\n```yaml\r\nfoo: bar\r\n```\r\n#### Example: YAML => JSON\r\n\r\nthen we can transform it to a JSON file _foo.json_\r\n\r\n```javascript\r\n{\r\n  \"foo\": \"bar\"\r\n}\r\n```\r\n\r\nusing this command:\r\n\r\n```\r\n$ jyt -s foo.yaml -t json -i 2\r\n```\r\n\r\nIn this example we have overwritten the standard target type (which is `js`) \r\nand applying an indent of _2_ instead of the default _4_. As default the output \r\nfile _foo.json_ is written relative to the input file (simply omitting the \r\n`dest` option here).\r\n\r\n**NOTE:** here you _have_ to provide the target with `-t json` or else the \r\ndefault `js` would have been applied! If the source would have been a `js` \r\ntype like\r\n\r\n```\r\n$ jyt -s foo.js -t json -i 2\r\n```\r\n\r\nthen the `js` value for `origin` is automatically inferred from file extension. \r\nAccordingly, this is also true for the `target` option.\r\n\r\n#### Example: JSON => JS\r\n\r\n```\r\n$ jyt -s foo.json -i 2\r\n```\r\n```javascript\r\nmodule.exports = {\r\n  foo: \"bar\"\r\n}\r\n```\r\n\r\n#### Example: JS => YAML\r\n\r\n```\r\n$ jyt -s foo.js -t yaml\r\n```\r\n```yaml\r\nfoo: bar\r\n```\r\n\r\n#### Example: Transformation with Different Destination\r\n\r\nSimply provide the `-d` with a different file name:\r\n\r\n```\r\n$ jyt -s foo.json -d results/foobar.yaml\r\n```\r\n\r\n#### Example: Transformation with Unsupported Source File Extension\r\n\r\nAs said, normally we infer from file extension to the type but assume the source \r\nfile has a file name which does not imply the type (here JS \r\ntype in a TEXT file), then you can simply provide the `-o` option with the \r\ncorrect `origin` type (of course, the `-t` option works analogous):\r\n\r\n\r\n```\r\n$ jyt -s foo.txt -o js -d foobar.yaml\r\n```\r\n\r\n#### Example: Read from File with Exports Identifier\r\n\r\nIt could be that a JS source `exports` several objects and you want to read \r\nfrom exactly the one you specify, then provide the `-m` (`--imports`) option.\r\n\r\nIn this this example we have a _foo.js_ file exporting _two_ objects:\r\n\r\n```javascript\r\nmodule.exports.foo = {\r\n    foo: 'bar'\r\n};\r\n\r\nmodule.exports.bar = {\r\n    bar: 'foo'\r\n};\r\n```\r\n\r\nbut you want to convert `bar` object, then call:\r\n\r\n```\r\n$ jyt -s foo.js -m bar -d bar.yaml\r\n```\r\n\r\nto get the YAML result:\r\n\r\n```yaml\r\nbar: foo\r\n```\r\n\r\n**NOTE:** the same applies on API level when using JS objects as `dest`:\r\n\r\n```javascript\r\nvar fooBar = {\r\n    foo: 'bar',\r\n    bar: 'foo'\r\n};\r\n\r\nvar options = {\r\n    src: fooBar,\r\n    dest: {},\r\n    exports: 'bar'\r\n};\r\n\r\n//...transform\r\n```\r\n\r\nThe transformation will result in this in-memory object:\r\n\r\n```javascript\r\nbar: {\r\n    foo: 'bar',\r\n    bar: 'foo'\r\n}\r\n```\r\nas sub-node of `options.dest`.\r\n\r\n#### Example: Write Exports Identifier for JS File\r\n\r\nAssume you want to generate a JS file with an exports string which gets an \r\nidentifier. We reuse the YAML file from above \r\n\r\n```yaml\r\nfoo: bar\r\n```\r\n\r\nusing this command:\r\n\r\n```\r\n$ jyt -s foo.yaml -d foobar.js -x foobar\r\n```\r\n\r\nThis generates the following output in JS file using `foobar` as identifier:\r\n\r\n```javascript\r\nmodule.exports.foobar = {\r\n    foo: \"bar\"\r\n}\r\n```\r\n\r\n**NOTE:** the identifier must be a valid JS identifier accoding to ECMAScript 6\r\n(see also [Valid JavaScript variable names in ECMAScript 6](https://mathiasbynens.be/notes/javascript-identifiers-es6) \r\nand [Generating a regular expression to match valid JavaScript identifiers](https://mathiasbynens.be/demo/javascript-identifier-regex)).\r\n\r\n#### Example: Force Overwriting\r\n\r\n**IMPORTANT NOTE:** when using this feature then any subsequent \r\nexecution which uses the same target/file name, \r\nwill overwrite the original source or target created beforehand!\r\n\r\nBy default this feature is not enabled to prevent you from accidentally \r\noverwriting your input source or already generated targets.\r\n\r\nBut let's say we want to overwrite the original source now because you want \r\nto change the indention from 2 to 4 SPACEs, then we can do this as follows:\r\n\r\n```\r\n$ jyt -s foo.js -f\r\n``` \r\n\r\nOf course, leaving out the `-f` switch creates a new file relatively to \r\nthe `origin`, named as _foo(1).js_ (note the consecutive number). Naturally, \r\nanother run of the command would result int a file called _foo(2).js_ \r\nand so forth.\r\n\r\n## Origin and Target Type Inference\r\n\r\nThe examples above have shown that we have an automatic type inference from file \r\nextensions. This is supported as shown by the following table (from-to):\r\n\r\n| File Extension | Type |\r\n| --- | --- |\r\n| _*.yaml_ | _yaml_ |\r\n| _*.yml_ | _yaml_ |\r\n| _*.js_ | _js_ |\r\n| _*.json_ | _json_ |\r\n\r\n**NOTE:** if you have files without an extension or e.g. _*.txt_ you _have_ to \r\nspecify the origin or target type!\r\n\r\n## API Usage\r\n\r\nSince the usage on CLI is a 2-step process:\r\n\r\n1. Read from source file to JS object => \r\n2. Write out (maybe to other type)\r\n\r\nthe direct API calls additionally provide the usage of a _middleware_ function \r\nwhere you can alter the input JS object before it is written and therefore, which turns \r\nthis into a 3-step process:\r\n \r\n1. Read from source => \r\n2. Alter the JS object => \r\n3. Write out (maybe to other type)\r\n\r\nFor more details about this and all the functions provided by this module please refer to the \r\n[API Reference](https://github.com/deadratfink/jy-transform/wiki/API-v1.0).\r\n\r\nThe `origin` and `target` type inference is also standard for the API level.\r\n\r\n### API Properties\r\n\r\nThe `Transformer` exposes the following function which takes besides an (optional) \r\n`middleware` function the necessary `options` for the transformation:\r\n\r\n```javascript\r\nfunction transform(options, middleware)\r\n```\r\n\r\nThe `options` object has to follow this key-values table:\r\n\r\n| Option | Type | Description | Default | Required |\r\n| --- | --- | --- | --- | --- |\r\n| origin | <code>string</code> | The origin type. | If not given, the type is tried to be inferred from the extension of source path, else it is _yaml_. | no |\r\n| target | <code>string</code> | The target type. | If not given, the type is tried to be inferred from the extension of destination path, else it is _js_ | no |\r\n| src | <code>string &#124; Readable &#124; object</code> | The source information object: `string` is used as file path, `Readable` stream provides a stringified source and `object` is used as direct JS source. | - | yes |\r\n| dest | <code>string &#124; Writable &#124; object</code> | The destination information object: `string` is used as file path, `Writable` stream writes a stringified source and `object` is used as direct JS object for assignment. | The output file is stored relative to the input file (same base name but with another extension if type differs). If input and output type are the same then the file overwriting is handled depending on the 'force' value! | no |\r\n| indent | <code>number</code> | The indention in files. | 4 | no |\r\n| force | <code>boolean</code> | Force overwriting of existing output files on write phase. When files are not overwritten, then the next transformation with same output file name gets a consecutive number on the base file name, e.g. in case of _foo.yaml_ it would be _foo(1).yaml_. | _false_ | no |\r\n| imports | <code>string</code> | Define a 'module.exports[.identifier] = ' identifier (to read from JS _source_ only, must be a valid JS identifier!) | _undefined_ | no |\r\n| exports | <code>string</code> | Define a 'module.exports[.identifier] = ' identifier (for usage in JS _destination_ only, must be a valid JS identifier!) | _undefined_ | no |\r\n\r\n**NOTE:** an invalid indention setting (1 > indent > 8) does not raise an error but a default of 4 SPACEs is applied instead.\r\n\r\n#### Example\r\n\r\n```javascript\r\nvar options = {\r\n    origin: 'json',\r\n    target: 'yaml',\r\n    src: 'foo.json',\r\n    dest: './foo/bar.yaml',\r\n    indent: 2\r\n}\r\n```\r\n\r\n### Using Middleware\r\n\r\nThe `middleware` is optional but if provided it must be of type `Function` and \r\na [Promise](http://bluebirdjs.com/docs/api-reference.html). One of the easiest \r\nones is the identity function \r\n\r\n_f(data) -> data_ \r\n\r\nwhich could be expressed as \r\n[Promise](http://bluebirdjs.com/docs/api-reference.html) function as follows:\r\n\r\n```javascript\r\nvar identity = function (data) {\r\n    return Promise.resolve(data);\r\n}\r\n```\r\n\r\nOf course, this would have no effect on the provided JS data. Actually, this one is \r\nused internally when no middleware is provided to ensure the proper promised \r\ncontrol flow.\r\n\r\nOK, lets go back to a more practical example, e.g. we want to alter the value of\r\nJS property before it is written to a file. Assuming we have this piece of YAML\r\nobject as input:\r\n\r\n```yaml\r\nfoo: old bar\r\n```\r\n\r\nApplying this [Promise](http://bluebirdjs.com/docs/api-reference.html) as middleware\r\n\r\n```javascript\r\nvar middleware = function (data) {\r\n    data.foo = 'new bar'; \r\n    return Promise.resolve(data);\r\n}\r\n\r\ntransformer.transform(options, middleware)\r\n    .then(function (msg){\r\n        logger.info(msg);\r\n    })\r\n    .catch(function (err) {\r\n        logger.error(err.stack);\r\n    });\r\n```\r\n\r\nwill result in such JSON file:\r\n\r\n```javascript\r\n{\r\n\t\"foo\": \"new bar\"\r\n}\r\n```\r\n\r\nOf course, in real world scenarios you will have use cases which usually have a \r\nhigher complexity where one function might be insufficient or at least \r\ninconvenient. but this does not raise a problem at all, because you can create \r\nseveral functions to be applied in the whole transformation process by gathering \r\nthem in one function.\r\n\r\nLet's assume we have some Promise functions to apply. For simplicity reasons we \r\nsimulate these for the moment by two functions, each adding a key-value to the \r\ngiven (initially empty) JS object.\r\n\r\n**NOTE:** each of them has to resolve with the `data` object! \r\n\r\n\r\n```javascript\r\nfunction key1(data) {\r\n    objectPath.set(data, 'key1', 'value1');\r\n    return Promise.resolve(data);\r\n}\r\n\r\nfunction key2(data) {\r\n    objectPath.set(data, 'key2', 'value2');\r\n    return Promise.resolve(data);\r\n}\r\n```\r\n\r\nThese can be collected by different aggregation or composition functions of the underlying\r\nPromise framework, e.g. using the  [`Promise.all([...])`](http://bluebirdjs.com/docs/api/promise.all.html) \r\nfunction. This one can collect all three functions above and ensure their proper subsequent execution:\r\n\r\n \r\n```javascript\r\nvar middleware = function (data) {\r\n    return Promise.all([key1(data), key2(data)])\r\n        .then(function(result) {\r\n            return Promise.resolve(result[result.length - 1]);\r\n        });\r\n};\r\n\r\nvar transformer = new Transformer(logger);\r\nvar logger = ...;\r\nvar options = {...};\r\n\r\nreturn transformer.transform(options, middleware)\r\n    .then(function (msg){\r\n        logger.info(msg);\r\n    })\r\n    .catch(function (err) {\r\n        logger.error(err.stack);\r\n    });\r\n```\r\n\r\nThen the result in the `middleware` function can be retrieved from the returned \r\narray, i.e. in case of [`Promise.all([...])`](http://bluebirdjs.com/docs/api/promise.all.html) \r\nyou have to pick the _last_ element which contains the \"final product\". \r\nFrom our example above it would be\r\n\r\n```javascript\r\n{\r\n    key1: 'value1',\r\n    key2: 'value2'\r\n}\r\n```\r\n\r\nwhich then is passed back to the transformation chain. Following this pattern \r\nyou can do almost everything with the JS object, like\r\n\r\n- deleting properties\r\n- changing properties to other types\r\n- validating and throwing error if not valid\r\n- ...\r\n\r\nWhatever you do during transformation, just keep it valid ;-)\r\n\r\n## Using Custom Logger\r\n\r\nIt is usual that you use an own `logger` in your application. This module supports you by \r\nletting you inject your logger as constructor argument: the `Reader`, `Transformer` and \r\n`Writer` constructor will accept an (optional) logger object.\r\n\r\nIf you do not provide one, then the default logger is `console`.\r\n\r\n```javascript\r\nvar logger = ...;\r\n\r\nvar reader = new Reader(logger);\r\nvar transformer = new Transformer(logger);\r\nvar writer = new Writer(logger);\r\n```\r\n\r\nAt least, the passed logger object _has to_ support the following functions:\r\n\r\n```javascript\r\nfunction info(msg)\r\nfunction debug(msg)\r\nfunction error(msg)\r\n```\r\n\r\n# API Reference\r\n\r\nFor more details on how to use the API, please refer to the \r\n[API Reference](https://github.com/deadratfink/jy-transform/wiki/API-v1.0) \r\nwiki which describes the full API and provides more examples.\r\n\r\n# Changelog\r\n\r\nThe complete changelog is listed in the wiki [Changelog](https://github.com/deadratfink/jy-transform/wiki/Changelog) section.\r\n\r\n\r\n\r\n\r\n# Contributing\r\n\r\nPull requests and stars are always welcome. Anybody is invited to take part \r\ninto this project. For bugs and feature requests, please create an \r\n[issue](https://github.com/deadratfink/jy-transform/issues).\r\nWhen contributing as coder, please take care of the following conventions:\r\n\r\n- Enter yourself in the `constributors` section of _package.json_.\r\n- We strictly follow [Semantic Versioning 2](http://semver.org) rules.\r\n- The `development` branch is the leading branch and is protected. Create bugfix and feature \r\n  branches (or fork into you own namespace) and create pull \r\n  requests to `development` when finished. Any of these should be prefixed with \r\n  `bugfix/#...` or `feature/#...` (followed by issue number and a short, \"underscored\" \r\n  proper meaning), e.g. \r\n  - `bugfix/#8_fix_js_reading_with_require`\r\n  - `feature/#14_multidocument_support`\r\n- Remember that name could need to be enclosed in quotes, e.g. \r\n  ```$ git checkout -b 'feature/#19_...'```\r\n  when using git shell command.\r\n- The `master` branch is protected and is the stable branch after a release. \r\n  It will never be pushed directly (only on release build).\r\n- Indention for any file is 4 SPACEs.\r\n- Keep code coverage high (> 95%).\r\n- Doc everything with [JSDocs](http://usejsdoc.org/) and document concepts in \r\n  [README.md](https://github.com/deadratfink/jy-transform/blob/development/README.md)\r\n  or [Wiki](https://github.com/deadratfink/jy-transform/wiki).\r\n- Use single parenthesis (`'...'`) in _*.js_ files instead of double parenthesis (`\"...\"`).\r\n- Avoid the of use parenthesis for keys in JSON objects.\r\n- Use the strict mode (`'use strict';`) in _*.js_ files.\r\n- File names should be lower-case with hyphens as divider, e.g. _options-handler.js_.\r\n- Markdown documentation files should be upper-case with _.md_ as extension, placed \r\n  in _./docs_, e.g. _USAGE.md_. The _README.md_ is build up by these files concatenated \r\n  by `npm run docs` command. Any new files have to be added to `scripts.docs` section of \r\n  _package.json_. Don't forget to regenerate _README.md_ before committing.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}