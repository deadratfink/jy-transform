#!/usr/bin/env node

'use strict';

var constants = require('./lib/constants.js');
var cli = require('cli');
var path = require('path');
var Transformer = require('./lib/transformer.js');
var transformer = new Transformer(cli);

///////////////////////////////////////////////////////////////////////////////
// CLI INIT
///////////////////////////////////////////////////////////////////////////////

/**
 * How to use the CLI.
 *
 * @type {string}
 * @private
 */
var usage = path.basename(__filename) + ' [INPUT-FILE] [OUTPUT-FILE] [OPTIONS]';

/**
 * The path to package.json.
 *
 * @type {string}
 * @private
 */
var packagePath = __dirname + '/package.json';

/**
 * The options description for parsing the command line input, must be an object with opts defined like:
 * ```
 * long_tag: [short_tag, description, value_type, default_value];
 * ```
 * @type {{origin: *[], target: *[], src: string[], dest: *[], indent: *[], force: string[], imports: string, exports: string}}
 * @private
 */
var options = {
    origin:  [ 'o', 'The origin type of INPUT-FILE: [ ' + constants.JS + ' | ' + constants.JSON + ' | ' + constants.YAML + ' ].', 'string', constants.DEFAULT_OPTIONS.origin ],
    target:  [ 't', 'The target type of OUTPUT-FILE: [ ' + constants.JS + ' | ' + constants.JSON + ' | ' + constants.YAML + ' ].', 'string', constants.DEFAULT_OPTIONS.target ],
    indent:  [ 'i', 'The indention for pretty-print: 1 - 8.', 'int', constants.DEFAULT_INDENT ],
    force:   [ 'f', 'Force overwriting of existing output files on write phase. When files are not overwritten (which is default), then the next transformation with same output file name gets a consecutive number on the base file name, e.g. in case of foo.yaml it would be foo(1).yaml.' ],
    imports: [ 'm', 'Define a \'module.exports[.identifier] = \' identifier (to read from JS _source_ file only, must be a valid JS identifier!).', 'string', constants.DEFAULT_OPTIONS.imports ],
    exports: [ 'x', 'Define a \'module.exports[.identifier] = \' identifier (for usage in JS destination file only, must be a valid JS identifier!).', 'string', constants.DEFAULT_OPTIONS.exports ]
};

/**
 * The main entry callback. When calling `cli.main()` this receives the `options`
 * given on CLI, then does the transformation with these options and finally, it
 * prints the result to the CLI.
 *
 * @param {array} args    - Not used inside this method!
 * @param {object} options - The options set on CLI.
 * @private
 */
function main(args, options) {
    cli.debug('ARGS: ' + args[0] + ', ' + args[1]);

    options.src = args[0];
    options.dest = args[1];

    return transformer.transform(options)
        .then(function (msg) {
            cli.info(msg);
        })
        .catch(function (err) {
            cli.error('////////////////////////////////////////////////////////////////////////////////');
            cli.error(err);
            cli.debug(err.stack);
            cli.error('////////////////////////////////////////////////////////////////////////////////');
            cli.getUsage(1);
        });
}

/**
 * Init the CLI instance.
 */
cli.width = 120;
cli.setUsage(usage);
cli.setApp(packagePath);
cli.enable('version', 'status', 'timeout');
cli.parse(options);
cli.main(main);
